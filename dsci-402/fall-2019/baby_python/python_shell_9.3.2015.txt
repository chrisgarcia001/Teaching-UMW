Windows PowerShell
Copyright (C) 2013 Microsoft Corporation. All rights reserved.

PS C:\Users\Administrator> cd C:\GitHub\dsci_402_couse_repo\baby_python
PS C:\GitHub\dsci_402_couse_repo\baby_python> python
Python 2.7.8 |Anaconda 2.1.0 (64-bit)| (default, Jul  2 2014, 15:12:11) [MSC v.1500 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
Anaconda is brought to you by Continuum Analytics.
Please check out: http://continuum.io/thanks and https://binstar.org
>>> 10*13
130
>>> sqrt(12)* (14/3.0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'sqrt' is not defined
>>> (31.1 / 16.4) * (14 / 3.0)
8.849593495934961
>>> 4 * 2
8
>>> 4 ** 2
16
>>> 4 ** 0.5
2.0
>>> a = 13
>>> b = 27.2
>>> a
13
>>> b
27.2
>>> a + b
40.2
>>> 1 / 3
0
>>> 1.0 / 3.0
0.3333333333333333
>>> c = "This is some text"
>>> d = "This is some more text"
>>> c + " " + d
'This is some text This is some more text'
>>> c
'This is some text'
>>> c = 10
>>> c
10
>>> [2,4,6]
[2, 4, 6]
>>> a = [1, 2, 3, "a", "b", "c"]
>>> a
[1, 2, 3, 'a', 'b', 'c']
>>> a[3]
'a'
>>> a[0]
1
>>> [1, 2, 3] + [4, 5, 6]
[1, 2, 3, 4, 5, 6]
>>> a
[1, 2, 3, 'a', 'b', 'c']
>>> b\
...
27.2
>>> b = [1, 2, 3]
>>> b + a
[1, 2, 3, 1, 2, 3, 'a', 'b', 'c']
>>> b
[1, 2, 3]
>>> b = b + [12]
>>> b
[1, 2, 3, 12]
>>> b.append(13)
>>> b
[1, 2, 3, 12, 13]
>>> m = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]
>>> m
[[1, 2, 3], [4, 5, 6], [7, 8, 9]]
>>> m[0]
[1, 2, 3]
>>> m[0][1]
2
>>> 2 * [1, 2, 3]
[1, 2, 3, 1, 2, 3]
>>> a = [6,5,4,3,2,1]
>>> sorted(a)
[1, 2, 3, 4, 5, 6]
>>> a
[6, 5, 4, 3, 2, 1]
>>> a
[6, 5, 4, 3, 2, 1]
>>> a.sort()
>>> a
[1, 2, 3, 4, 5, 6]
>>> b = ["e", "d", "c", "b", "a"]
>>> b
['e', 'd', 'c', 'b', 'a']
>>> sorted(b)
['a', 'b', 'c', 'd', 'e']
>>> a
[1, 2, 3, 4, 5, 6]
>>> a[:3]
[1, 2, 3]
>>> a[3:]
[4, 5, 6]
>>> a[2:4]
[3, 4]
>>> a
[1, 2, 3, 4, 5, 6]
>>> reverse(a)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
NameError: name 'reverse' is not defined
>>> a
[1, 2, 3, 4, 5, 6]
>>> a.reverse()
>>> a
[6, 5, 4, 3, 2, 1]
>>> a
[6, 5, 4, 3, 2, 1]
>>> a[::-1]
[1, 2, 3, 4, 5, 6]
>>> a
[6, 5, 4, 3, 2, 1]
>>> a
[6, 5, 4, 3, 2, 1]
>>> a[::2]
[6, 4, 2]
>>> a[::3]
[6, 3]
>>> a[::1]
[6, 5, 4, 3, 2, 1]
>>> a[::-1]
[1, 2, 3, 4, 5, 6]
>>> a[::-2]
[1, 3, 5]
>>> a
[6, 5, 4, 3, 2, 1]
>>> a
[6, 5, 4, 3, 2, 1]
>>> b = list(a)
>>> a
[6, 5, 4, 3, 2, 1]
>>> b
[6, 5, 4, 3, 2, 1]
>>> b = a
>>> a
[6, 5, 4, 3, 2, 1]
>>> b
[6, 5, 4, 3, 2, 1]
>>> b.sort()
>>> a
[1, 2, 3, 4, 5, 6]
>>> b
[1, 2, 3, 4, 5, 6]
>>> b = list a
  File "<stdin>", line 1
    b = list a
             ^
SyntaxError: invalid syntax
>>> b = list(a)
>>> a
[1, 2, 3, 4, 5, 6]
>>> b
[1, 2, 3, 4, 5, 6]
>>> b.reverse()
>>> a
[1, 2, 3, 4, 5, 6]
>>> b
[6, 5, 4, 3, 2, 1]
>>> "abc" + "def"
'abcdef'
>>> "abc" + 'def'
'abcdef'
>>> "ab'c'" + 'def'
"ab'c'def"
>>> "ab'c'" + 'def'
"ab'c'def"
>>> s = "abcdefg'
  File "<stdin>", line 1
    s = "abcdefg'
                ^
SyntaxError: EOL while scanning string literal
>>> s = "abcdefg"
>>> s[1]
'b'
>>> s[1:4]
'bcd'
>>> s
'abcdefg'
>>> s
'abcdefg'
>>> s.upper()
'ABCDEFG'
>>> su = s.upper()
>>> su
'ABCDEFG'
>>> su.lower()
'abcdefg'
>>> s
'abcdefg'
>>>
>>> s.startswith("abc")
True
>>> s.startswith("ab")
True
>>> s.startswith("a")
True
>>> s.startswith("")
True
>>> s.startswith("acb")
False
>>> s.endswith("acb")
False
>>> s.endswith("efg")
True
>>> s.endswith("fg")
True
>>> s.endswith("fh")
False
>>> s= 'abc-def-ghi'
>>> s
'abc-def-ghi'
>>> s.split('-')
['abc', 'def', 'ghi']
>>> s2 = "abccabccab"
>>> s2.split("cc")
['ab', 'ab', 'ab']
>>> splitter = '-'
>>> splitter
'-'
>>> splitter.join(["abc", "def", "ghi"])
'abc-def-ghi'
>>> '-'.join(["abc", "def", "ghi"])
'abc-def-ghi'
>>> 2:10
  File "<stdin>", line 1
    2:10
     ^
SyntaxError: invalid syntax
>>> range(5, 21)
[5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
>>> range(21)
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]
>>> range(5, 21, 2)
[5, 7, 9, 11, 13, 15, 17, 19]
>>> range(5, 22, 2)
[5, 7, 9, 11, 13, 15, 17, 19, 21]
>>> range(5, 100, 4)
[5, 9, 13, 17, 21, 25, 29, 33, 37, 41, 45, 49, 53, 57, 61, 65, 69, 73, 77, 81, 85, 89, 93, 97]
>>> range(5, 100, 3.66)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: range() integer step argument expected, got float.
>>> range(5, 100)
[5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35,
36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65,
66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
96, 97, 98, 99]
>>> range(100, 5, -3)
[100, 97, 94, 91, 88, 85, 82, 79, 76, 73, 70, 67, 64, 61, 58, 55, 52, 49, 46, 43, 40, 37, 34, 31, 28, 25, 22, 19, 16, 13
, 10, 7]
>>> lst = [1,2,3] + [1,2,3]
>>> lst
[1, 2, 3, 1, 2, 3]
>>> set(lst)
set([1, 2, 3])
>>> x = set(lst)
>>> x
set([1, 2, 3])
>>> x[1]
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'set' object does not support indexing
>>> x
set([1, 2, 3])
>>> y = set([2,3,4])
>>> x
set([1, 2, 3])
>>> y
set([2, 3, 4])
>>> x.union(y)
set([1, 2, 3, 4])
>>> y.union(x)
set([1, 2, 3, 4])
>>> x.intersection(y)
set([2, 3])
>>> y.intersection(x)
set([2, 3])
>>> x == y
False
>>> x
set([1, 2, 3])
>>> x == set([3,2,1])
True
>>> x == set([3,2,1,1,2,3])
True
>>> x
set([1, 2, 3])
>>> y
set([2, 3, 4])
>>> x.difference(y)
set([1])
>>> y.difference(x)
set([4])
>>> y
set([2, 3, 4])
>>> y.remove(2)
>>> y
set([3, 4])
>>> a
[1, 2, 3, 4, 5, 6]
>>> del(a[2])
>>> a
[1, 2, 4, 5, 6]
>>> t1 = ("a", 1)
>>> t2 = ("b", 2)
>>> t3 = ("c", 3)
>>> t1
('a', 1)
>>> t1[0]
'a'
>>> t1[1]
1
>>> t4 = ("d", 4, "four")
>>> x, y, z = t4
>>> x, y, z = (5, 10, 15)
>>> x
5
>>> y
10
>>> z
15
>>> x, y = (5, 10, 15)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: too many values to unpack
>>> x, y, _ = (5, 10, 15)
>>>